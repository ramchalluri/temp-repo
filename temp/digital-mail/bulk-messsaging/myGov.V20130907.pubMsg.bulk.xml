<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="myGov.V20130907.publishmessage.bulk" resourceRoot="${projectDir}" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" id="c39f8465-761d-4831-be8c-65eba3cc311e" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="200508" name="MGIPUBLISHMESSAGEUTv20130907SOAP12Binding" type="wsdl" bindingName="{http://ns.services.my.gov.au/inbox/publishmessage/concrete/wsdl/2013/09/07}MGIPUBLISHMESSAGEUTv20130907SOAP12Binding" soapVersion="1_2" anonymous="optional" definition="../workspace/csiServiceArtefacts/csiServiceArtefacts/trunk/ESBRelease2/wsdl/mygov/inbox/concrete/v20130907/mygov.inbox.publishmessage.concrete.v20130907.binding.wsdl" id="b1d5779a-29c3-4e32-a618-72429d961780" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/workspace/csiServiceArtefacts/csiServiceArtefacts/trunk/ESBRelease2/wsdl/mygov/inbox/concrete/v20130907/mygov.inbox.publishmessage.concrete.v20130907.binding.wsdl"><con:part><con:url>file:/C:/workspace/csiServiceArtefacts/csiServiceArtefacts/trunk/ESBRelease2/wsdl/mygov/inbox/concrete/v20130907/mygov.inbox.publishmessage.concrete.v20130907.binding.wsdl</con:url><con:content><![CDATA[<!--/**
  *============================================================================
  * Service Description  
  * @name:  	mygov.inbox.publishmessage.concrete.v20130907.binding.wsdl
  * @security:	WS-Security Username Token Authentication
  * @wsdlsoap:	SOAP1.2 
  * @artifact: 	MGIPUBLISHMESSAGEUTv20130907
  * @target:	2013/09/07 - 2013 SEPT Release
  *****************************************************************************
  * @author:	Ram Challuri
  * @version:	1
  * @since:		
  *============================================================================
  */-->
<wsdl:definitions targetNamespace="http://ns.services.my.gov.au/inbox/publishmessage/concrete/wsdl/2013/09/07" name="MGIPUBLISHMESSAGEUTv20130907" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702" xmlns:tns="http://ns.services.my.gov.au/inbox/publishmessage/concrete/wsdl/2013/09/07">
  <wsdl:import namespace="http://ns.services.my.gov.au/inbox/publishmessage/concrete/wsdl/2013/09/07" location="mygov.inbox.publishmessage.concrete.v20130907.interface.wsdl"/>
  <wsdl:binding name="MGIPUBLISHMESSAGEUTv20130907SOAP12Binding" type="tns:MGIPUBLISHMESSAGEUTv20130907PortType">
    <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsp:Policy wsdl:required="true">
      <wsp:ExactlyOne>
        <wsp:All>
          <wsaw:UsingAddressing/>
        </wsp:All>
      </wsp:ExactlyOne>
    </wsp:Policy>
    <wsdl:operation name="publishMessage">
      <wsdlsoap:operation style="document"/>
      <wsdl:input name="publishMessageRequest">
        <wsp:Policy wsdl:required="true">
          <wsp:ExactlyOne>
            <wsp:All>
              <wsp:Policy>
                <sp:SupportingTokens>
                  <wsp:All>
                    <sp:UsernameToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
                      <wsp:Policy>
                        <sp:HashPassword/>
                      </wsp:Policy>
                    </sp:UsernameToken>
                    <sp:IncludeTimestamp/>
                  </wsp:All>
                </sp:SupportingTokens>
              </wsp:Policy>
            </wsp:All>
          </wsp:ExactlyOne>
        </wsp:Policy>
        <wsdlsoap:header message="tns:commonMyGovHeader" part="myGovProductHeader" use="literal" wsdl:required="true"/>
        <wsdlsoap:header message="tns:commonMyGovHeader" part="myGovSubjectIdHeader" use="literal" wsdl:required="false"/>
        <wsdlsoap:header message="tns:commonMyGovHeader" part="myGovAuditHeader" use="literal" wsdl:required="true"/>
        <wsdlsoap:header message="tns:commonSecurityHeader" part="myGovSecurityHeader" use="literal" wsdl:required="true"/>
        <wsdlsoap:header message="tns:commonWSAHeader" part="wsaActionHeader" use="literal" wsdl:required="true"/>
        <wsdlsoap:header message="tns:commonWSAHeader" part="wsaMessageIDHeader" use="literal" wsdl:required="true"/>
        <wsdlsoap:header message="tns:commonWSAHeader" part="wsaToHeader" use="literal" wsdl:required="true"/>
        <wsdlsoap:body parts="request" use="literal"/>
      </wsdl:input>
      <wsdl:output name="publishMessageResponse">
        <wsdlsoap:header message="tns:commonWSAHeader" part="wsaActionHeader" use="literal" wsdl:required="true"/>
        <wsdlsoap:header message="tns:commonWSAHeader" part="wsaMessageIDHeader" use="literal" wsdl:required="true"/>
        <wsdlsoap:header message="tns:commonWSAHeader" part="wsaToHeader" use="literal" wsdl:required="true"/>
        <wsdlsoap:header message="tns:commonWSAHeader" part="wsaRelatesToHeader" use="literal" wsdl:required="true"/>
        <wsdlsoap:header message="tns:commonMyGovHeader" part="myGovProductHeader" use="literal" wsdl:required="true"/>
        <wsdlsoap:body parts="response" use="literal"/>
      </wsdl:output>
      <wsdl:fault name="standardError">
        <wsdlsoap:fault use="literal" name="standardError"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="MGIPUBLISHMESSAGEUTv20130907Service">
    <wsdl:port name="MGIPUBLISHMESSAGEUTv20130907Port" binding="tns:MGIPUBLISHMESSAGEUTv20130907SOAP12Binding">
      <wsdlsoap:address location="http://services.my.gov.au/inbox/publishmessage/concrete/endpoint/2013/09/07"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:\C:\workspace\csiServiceArtefacts\csiServiceArtefacts\trunk\ESBRelease2\wsdl\mygov\inbox\concrete\v20130907\mygov.inbox.publishmessage.concrete.v20130907.interface.wsdl</con:url><con:content><![CDATA[<!--/**
  *============================================================================
  * Service Description  
  * @name:	    mygov.inbox.publishmessage.concrete.v20130907.interface.wsdl
  * @security:	WS-Security Username Token V2 Authentication
  * @soap:		SOAP1.2 
  * @artifact: 	MGIPUBLISHMESSAGEUTv20130907
  * @target:	2013/09/07 - 2013 SEPT Release
  *****************************************************************************
  * @author:	Ram Challuri
  * @version:	1
  * @since:		2013/07/26
  *============================================================================
  */-->
<wsdl:definitions targetNamespace="http://ns.services.my.gov.au/inbox/publishmessage/concrete/wsdl/2013/09/07" name="MGIPUBLISHMESSAGEUTv20130907" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ce="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:msg="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:tns="http://ns.services.my.gov.au/inbox/publishmessage/concrete/wsdl/2013/09/07">
  <wsdl:types>
    <xsd:schema elementFormDefault="qualified">
      <xsd:import namespace="http://www.w3.org/2005/08/addressing" schemaLocation="../../../../../schema/w3c/ws-addr-1.0.xsd"/>
      <xsd:import namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" schemaLocation="../../../../../schema/oasis/oasis-200401-wss-wssecurity-secext-1.0.xsd"/>
      <xsd:import namespace="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" schemaLocation="../../../../../schema/mygov/common/v20130907/MyGovCommonCoreElements.v20130907.xsd"/>
      <xsd:import namespace="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" schemaLocation="../../../../../schema/mygov/inbox/messages/v20130907/mygov.inbox.messages.v20130907.xsd"/>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="publishMessageInMsg">
    <wsdl:part name="request" element="msg:publishMessage"/>
  </wsdl:message>
  <wsdl:message name="publishMessageOutMsg">
    <wsdl:part name="response" element="msg:publishMessageResponse"/>
  </wsdl:message>
  <wsdl:message name="commonWSAHeader">
    <wsdl:part name="wsaActionHeader" element="wsa:Action"/>
    <wsdl:part name="wsaToHeader" element="wsa:To"/>
    <wsdl:part name="wsaMessageIDHeader" element="wsa:MessageID"/>
    <wsdl:part name="wsaRelatesToHeader" element="wsa:RelatesTo"/>
  </wsdl:message>
  <wsdl:message name="commonSecurityHeader">
    <wsdl:part name="myGovSecurityHeader" element="wsse:Security"/>
  </wsdl:message>
  <wsdl:message name="commonMyGovHeader">
    <wsdl:part name="myGovProductHeader" element="ce:product"/>
    <wsdl:part name="myGovSubjectIdHeader" element="ce:subjectId"/>
    <wsdl:part name="myGovAuditHeader" element="ce:audit"/>
  </wsdl:message>
  <wsdl:message name="standardErrorMsg">
    <wsdl:part name="fault" element="ce:serviceMessages"/>
  </wsdl:message>
  <wsdl:portType name="MGIPUBLISHMESSAGEUTv20130907PortType">
    <wsdl:operation name="publishMessage">
      <wsdl:input name="publishMessageRequest" message="tns:publishMessageInMsg" wsam:Action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage"/>
      <wsdl:output name="publishMessageResponse" message="tns:publishMessageOutMsg" wsam:Action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessageresponse"/>
      <wsdl:fault name="standardError" message="tns:standardErrorMsg" wsam:Action="http://ns.services.my.gov.au/svc/commonmessages/2013/09/07/standardfault"/>
    </wsdl:operation>
  </wsdl:portType>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:\C:\workspace\csiServiceArtefacts\csiServiceArtefacts\trunk\ESBRelease2\schema\w3c\ws-addr-1.0.xsd</con:url><con:content><![CDATA[<!--W3C XML Schema defined in the Web Services Addressing 1.0 specification
    http://www.w3.org/TR/ws-addr-core

   Copyright © 2005 World Wide Web Consortium,

   (Massachusetts Institute of Technology, European Research Consortium for
   Informatics and Mathematics, Keio University). All Rights Reserved. This
   work is distributed under the W3C® Software License [1] in the hope that
   it will be useful, but WITHOUT ANY WARRANTY; without even the implied
   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

   [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231

   $Id: ws-addr.xsd,v 1.2 2008/07/23 13:38:16 plehegar Exp $-->
<xs:schema targetNamespace="http://www.w3.org/2005/08/addressing" blockDefault="#all" elementFormDefault="qualified" finalDefault="" attributeFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.w3.org/2005/08/addressing">
  <!--Constructs from the WS-Addressing Core-->
  <xs:element name="EndpointReference" type="tns:EndpointReferenceType"/>
  <xs:complexType name="EndpointReferenceType" mixed="false">
    <xs:sequence>
      <xs:element name="Address" type="tns:AttributedURIType"/>
      <xs:element ref="tns:ReferenceParameters" minOccurs="0"/>
      <xs:element ref="tns:Metadata" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="lax"/>
  </xs:complexType>
  <xs:element name="ReferenceParameters" type="tns:ReferenceParametersType"/>
  <xs:complexType name="ReferenceParametersType" mixed="false">
    <xs:sequence>
      <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="lax"/>
  </xs:complexType>
  <xs:element name="Metadata" type="tns:MetadataType"/>
  <xs:complexType name="MetadataType" mixed="false">
    <xs:sequence>
      <xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="lax"/>
  </xs:complexType>
  <xs:element name="MessageID" type="tns:AttributedURIType"/>
  <xs:element name="RelatesTo" type="tns:RelatesToType"/>
  <xs:complexType name="RelatesToType" mixed="false">
    <xs:simpleContent>
      <xs:extension base="xs:anyURI">
        <xs:attribute name="RelationshipType" type="tns:RelationshipTypeOpenEnum" use="optional" default="http://www.w3.org/2005/08/addressing/reply"/>
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="RelationshipTypeOpenEnum">
    <xs:union memberTypes="tns:RelationshipType xs:anyURI"/>
  </xs:simpleType>
  <xs:simpleType name="RelationshipType">
    <xs:restriction base="xs:anyURI">
      <xs:enumeration value="http://www.w3.org/2005/08/addressing/reply"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="ReplyTo" type="tns:EndpointReferenceType"/>
  <xs:element name="From" type="tns:EndpointReferenceType"/>
  <xs:element name="FaultTo" type="tns:EndpointReferenceType"/>
  <xs:element name="To" type="tns:AttributedURIType"/>
  <xs:element name="Action" type="tns:AttributedURIType"/>
  <xs:complexType name="AttributedURIType" mixed="false">
    <xs:simpleContent>
      <xs:extension base="xs:anyURI">
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <!--Constructs from the WS-Addressing SOAP binding-->
  <xs:attribute name="IsReferenceParameter" type="xs:boolean"/>
  <xs:simpleType name="FaultCodesOpenEnumType">
    <xs:union memberTypes="tns:FaultCodesType xs:QName"/>
  </xs:simpleType>
  <xs:simpleType name="FaultCodesType">
    <xs:restriction base="xs:QName">
      <xs:enumeration value="tns:InvalidAddressingHeader"/>
      <xs:enumeration value="tns:InvalidAddress"/>
      <xs:enumeration value="tns:InvalidEPR"/>
      <xs:enumeration value="tns:InvalidCardinality"/>
      <xs:enumeration value="tns:MissingAddressInEPR"/>
      <xs:enumeration value="tns:DuplicateMessageID"/>
      <xs:enumeration value="tns:ActionMismatch"/>
      <xs:enumeration value="tns:MessageAddressingHeaderRequired"/>
      <xs:enumeration value="tns:DestinationUnreachable"/>
      <xs:enumeration value="tns:ActionNotSupported"/>
      <xs:enumeration value="tns:EndpointUnavailable"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="RetryAfter" type="tns:AttributedUnsignedLongType"/>
  <xs:complexType name="AttributedUnsignedLongType" mixed="false">
    <xs:simpleContent>
      <xs:extension base="xs:unsignedLong">
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:element name="ProblemHeaderQName" type="tns:AttributedQNameType"/>
  <xs:complexType name="AttributedQNameType" mixed="false">
    <xs:simpleContent>
      <xs:extension base="xs:QName">
        <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:element name="ProblemIRI" type="tns:AttributedURIType"/>
  <xs:element name="ProblemAction" type="tns:ProblemActionType"/>
  <xs:complexType name="ProblemActionType" mixed="false">
    <xs:sequence>
      <xs:element ref="tns:Action" minOccurs="0"/>
      <xs:element name="SoapAction" minOccurs="0" type="xs:anyURI"/>
    </xs:sequence>
    <xs:anyAttribute namespace="##other" processContents="lax"/>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\workspace\csiServiceArtefacts\csiServiceArtefacts\trunk\ESBRelease2\schema\oasis\oasis-200401-wss-wssecurity-secext-1.0.xsd</con:url><con:content><![CDATA[<!--OASIS takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights. Information on OASIS's procedures with respect to rights in OASIS specifications can be found at the OASIS website. Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementors or users of this specification, can be obtained from the OASIS Executive Director.
OASIS invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights which may cover technology that may be required to implement this specification. Please address the information to the OASIS Executive Director.
Copyright © OASIS Open 2002-2004. All Rights Reserved.
This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself does not be modified in any way, such as by removing the copyright notice or references to OASIS, except as needed for the purpose of developing OASIS specifications, in which case the procedures for copyrights defined in the OASIS Intellectual Property Rights document must be followed, or as required to translate it into languages other than English.
The limited permissions granted above are perpetual and will not be revoked by OASIS or its successors or assigns.
This document and the information contained herein is provided on an “AS IS” basis and OASIS DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.-->
<xsd:schema targetNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" blockDefault="#all" version="0.2" xmlns="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:import namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" schemaLocation="oasis-200401-wss-wssecurity-utility-1.0.xsd"/>
  <!--<xsd:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.w3.org/2001/xml.xsd"/>-->
  <xsd:complexType name="AttributedString">
    <xsd:annotation>
      <xsd:documentation>This type represents an element with arbitrary attributes.</xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="xsd:string">
        <xsd:attribute ref="wsu:Id"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="PasswordString">
    <xsd:annotation>
      <xsd:documentation>This type is used for password elements per Section 4.1.</xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="wsse:AttributedString">
        <xsd:attribute name="Type" type="xsd:anyURI"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="EncodedString">
    <xsd:annotation>
      <xsd:documentation>This type is used for elements containing stringified binary data.</xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="wsse:AttributedString">
        <xsd:attribute name="EncodingType" type="xsd:anyURI"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="UsernameTokenType">
    <xsd:annotation>
      <xsd:documentation>This type represents a username token per Section 4.1</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Username" type="wsse:AttributedString"/>
      <xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute ref="wsu:Id"/>
    <xsd:anyAttribute namespace="##other" processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="BinarySecurityTokenType">
    <xsd:annotation>
      <xsd:documentation>A security token that is encoded in binary</xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="wsse:EncodedString">
        <xsd:attribute name="ValueType" type="xsd:anyURI"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="KeyIdentifierType">
    <xsd:annotation>
      <xsd:documentation>A security token key identifier</xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="wsse:EncodedString">
        <xsd:attribute name="ValueType" type="xsd:anyURI"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:simpleType name="tUsage">
    <xsd:annotation>
      <xsd:documentation>Typedef to allow a list of usages (as URIs).</xsd:documentation>
    </xsd:annotation>
    <xsd:list itemType="xsd:anyURI"/>
  </xsd:simpleType>
  <xsd:attribute name="Usage" type="tUsage">
    <xsd:annotation>
      <xsd:documentation>This global attribute is used to indicate the usage of a referenced or indicated token within the
        containing context</xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
  <xsd:complexType name="ReferenceType">
    <xsd:annotation>
      <xsd:documentation>This type represents a reference to an external security token.</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="URI" type="xsd:anyURI"/>
    <xsd:attribute name="ValueType" type="xsd:anyURI"/>
    <xsd:anyAttribute namespace="##other" processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="EmbeddedType">
    <xsd:annotation>
      <xsd:documentation>This type represents a reference to an embedded security token.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:any processContents="lax"/>
    </xsd:choice>
    <xsd:attribute name="ValueType" type="xsd:anyURI"/>
    <xsd:anyAttribute namespace="##other" processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="SecurityTokenReferenceType">
    <xsd:annotation>
      <xsd:documentation>This type is used reference a security token.</xsd:documentation>
    </xsd:annotation>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:any processContents="lax"/>
    </xsd:choice>
    <xsd:attribute ref="wsu:Id"/>
    <xsd:attribute ref="wsse:Usage"/>
    <xsd:anyAttribute namespace="##other" processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="SecurityHeaderType">
    <xsd:annotation>
      <xsd:documentation>This complexType defines header block to use for security-relevant data directed at a specific SOAP
        actor.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>The use of "any" is to allow extensibility and different forms of security data.</xsd:documentation>
        </xsd:annotation>
      </xsd:any>
    </xsd:sequence>
    <xsd:anyAttribute namespace="##other" processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="TransformationParametersType">
    <xsd:annotation>
      <xsd:documentation>This complexType defines a container for elements to be specified from any namespace as
        properties/parameters of a DSIG transformation.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>The use of "any" is to allow extensibility from any namespace.</xsd:documentation>
        </xsd:annotation>
      </xsd:any>
    </xsd:sequence>
    <xsd:anyAttribute namespace="##other" processContents="lax"/>
  </xsd:complexType>
  <xsd:element name="UsernameToken" type="wsse:UsernameTokenType">
    <xsd:annotation>
      <xsd:documentation>This element defines the wsse:UsernameToken element per Section 4.1.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="BinarySecurityToken" type="wsse:BinarySecurityTokenType">
    <xsd:annotation>
      <xsd:documentation>This element defines the wsse:BinarySecurityToken element per Section 4.2.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="Reference" type="wsse:ReferenceType">
    <xsd:annotation>
      <xsd:documentation>This element defines a security token reference</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="Embedded" type="wsse:EmbeddedType">
    <xsd:annotation>
      <xsd:documentation>This element defines a security token embedded reference</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="KeyIdentifier" type="wsse:KeyIdentifierType">
    <xsd:annotation>
      <xsd:documentation>This element defines a key identifier reference</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="SecurityTokenReference" type="wsse:SecurityTokenReferenceType">
    <xsd:annotation>
      <xsd:documentation>This element defines the wsse:SecurityTokenReference per Section 4.3.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="Security" type="wsse:SecurityHeaderType">
    <xsd:annotation>
      <xsd:documentation>This element defines the wsse:Security SOAP header element per Section 4.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="TransformationParameters" type="wsse:TransformationParametersType">
    <xsd:annotation>
      <xsd:documentation>This element contains properties for transformations from any namespace, including DSIG.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="Password" type="wsse:PasswordString"/>
  <xsd:element name="Nonce" type="wsse:EncodedString"/>
  <xsd:simpleType name="FaultcodeEnum">
    <xsd:restriction base="xsd:QName">
      <xsd:enumeration value="wsse:UnsupportedSecurityToken"/>
      <xsd:enumeration value="wsse:UnsupportedAlgorithm"/>
      <xsd:enumeration value="wsse:InvalidSecurity"/>
      <xsd:enumeration value="wsse:InvalidSecurityToken"/>
      <xsd:enumeration value="wsse:FailedAuthentication"/>
      <xsd:enumeration value="wsse:FailedCheck"/>
      <xsd:enumeration value="wsse:SecurityTokenUnavailable"/>
    </xsd:restriction>
  </xsd:simpleType>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\workspace\csiServiceArtefacts\csiServiceArtefacts\trunk\ESBRelease2\schema\oasis\oasis-200401-wss-wssecurity-utility-1.0.xsd</con:url><con:content><![CDATA[<!--OASIS takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights. Information on OASIS's procedures with respect to rights in OASIS specifications can be found at the OASIS website. Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementors or users of this specification, can be obtained from the OASIS Executive Director.
OASIS invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights which may cover technology that may be required to implement this specification. Please address the information to the OASIS Executive Director.
Copyright © OASIS Open 2002-2004. All Rights Reserved.
This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself does not be modified in any way, such as by removing the copyright notice or references to OASIS, except as needed for the purpose of developing OASIS specifications, in which case the procedures for copyrights defined in the OASIS Intellectual Property Rights document must be followed, or as required to translate it into languages other than English.
The limited permissions granted above are perpetual and will not be revoked by OASIS or its successors or assigns.
This document and the information contained herein is provided on an “AS IS” basis and OASIS DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.-->
<xsd:schema targetNamespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" version="0.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
  <!--// Fault Codes ///////////////////////////////////////////-->
  <xsd:simpleType name="tTimestampFault">
    <xsd:annotation>
      <xsd:documentation>This type defines the fault code value for Timestamp message expiration.</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:QName">
      <xsd:enumeration value="wsu:MessageExpired"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!--// Global attributes ////////////////////////////////////-->
  <xsd:attribute name="Id" type="xsd:ID">
    <xsd:annotation>
      <xsd:documentation>This global attribute supports annotating arbitrary elements with an ID.</xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
  <xsd:attributeGroup name="commonAtts">
    <xsd:annotation>
      <xsd:documentation>Convenience attribute group used to simplify this schema.</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute ref="wsu:Id" use="optional"/>
    <xsd:anyAttribute namespace="##other" processContents="lax"/>
  </xsd:attributeGroup>
  <!--// Utility types ////////////////////////////////////////-->
  <xsd:complexType name="AttributedDateTime">
    <xsd:annotation>
      <xsd:documentation>This type is for elements whose [children] is a psuedo-dateTime and can have arbitrary attributes.</xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="xsd:string">
        <xsd:attributeGroup ref="wsu:commonAtts"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="AttributedURI">
    <xsd:annotation>
      <xsd:documentation>This type is for elements whose [children] is an anyURI and can have arbitrary attributes.</xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="xsd:anyURI">
        <xsd:attributeGroup ref="wsu:commonAtts"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <!--// Timestamp header components ///////////////////////////-->
  <xsd:complexType name="TimestampType">
    <xsd:annotation>
      <xsd:documentation>This complex type ties together the timestamp related elements into a composite type.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ref="wsu:Created" minOccurs="0"/>
      <xsd:element ref="wsu:Expires" minOccurs="0"/>
      <xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:any namespace="##other" processContents="lax"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attributeGroup ref="wsu:commonAtts"/>
  </xsd:complexType>
  <xsd:element name="Timestamp" type="wsu:TimestampType">
    <xsd:annotation>
      <xsd:documentation>This element allows Timestamps to be applied anywhere element wildcards are present, including as a
        SOAP header.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <!--global element decls to allow individual elements to appear anywhere-->
  <xsd:element name="Expires" type="wsu:AttributedDateTime">
    <xsd:annotation>
      <xsd:documentation>This element allows an expiration time to be applied anywhere element wildcards are present.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="Created" type="wsu:AttributedDateTime">
    <xsd:annotation>
      <xsd:documentation>This element allows a creation time to be applied anywhere element wildcards are present.</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\workspace\csiServiceArtefacts\csiServiceArtefacts\trunk\ESBRelease2\schema\mygov\common\v20130907\MyGovCommonCoreElements.v20130907.xsd</con:url><con:content><![CDATA[<!--===========================================================================
    @File:          MyGovCommonCoreElements.v20130907.xsd
    @Author:        MyGov Australia
    @Version:       v20130907
    @CreatedDate:   2013/07/25
    @Release:       2
    @Description:   This XSD contains the common core data types for MyGov Australia
    ===========================================================================-->
<xsd:schema targetNamespace="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:ce="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:cdt="http://ns.services.my.gov.au/common/schema/2013/09/07/datatypes" xmlns:mgqi="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:tns="http://ns.services.my.gov.au/common/schema/2013/09/07/elements">
  <xsd:annotation>
    <xsd:documentation>============================== IMPORTS =======================================</xsd:documentation>
  </xsd:annotation>
  <xsd:import namespace="http://ns.services.my.gov.au/common/schema/2013/09/07/datatypes" schemaLocation="MyGovCommonCoreDatatypes.v20130907.xsd"/>
  <xsd:import namespace="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" schemaLocation="MyGovCommonQualifiedIdentifier.v20130907.xsd"/>
  <xsd:import namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" schemaLocation="../../../oasis/oasis-200401-wss-wssecurity-utility-1.0.xsd"/>
  <xsd:annotation>
    <xsd:documentation>============================== ELEMENTS =======================================</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="serviceMessage" type="ce:ServiceMessageType"/>
  <xsd:element name="serviceMessages" type="ce:ServiceMessagesType"/>
  <xsd:element name="serviceProvider" type="mgqi:QualifiedId"/>
  <xsd:element name="product" type="ce:ProductType"/>
  <xsd:element name="subjectId" type="mgqi:QualifiedId"/>
  <xsd:element name="audit" type="ce:AuditType"/>
  <xsd:annotation>
    <xsd:documentation>============================== COMPLEX TYPES ==================================</xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="ServiceMessageType">
    <xsd:sequence>
      <xsd:element name="code" type="xsd:string" nillable="false"/>
      <xsd:element name="severity" type="cdt:SeverityType" nillable="false"/>
      <xsd:element name="reason" type="xsd:string" nillable="false"/>
      <xsd:element name="details" type="ce:detail" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ServiceMessagesType">
    <xsd:sequence>
      <xsd:element name="highestSeverity" type="cdt:SeverityType"/>
      <xsd:element ref="ce:serviceMessage" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="detail">
    <xsd:sequence>
      <xsd:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ProductType">
    <xsd:sequence>
      <xsd:element name="organisation" type="mgqi:QualifiedId" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="productName" type="xsd:string" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="productVersion" type="xsd:string" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="platform" type="xsd:string" minOccurs="1" maxOccurs="1"/>
    </xsd:sequence>
    <xsd:anyAttribute/>
  </xsd:complexType>
  <xsd:complexType name="AuditType">
    <xsd:sequence>
      <xsd:element name="user" type="tns:AuditUserType" minOccurs="1"/>
      <xsd:element name="globalSessionKey" type="cdt:GlobalSessionKeyType" minOccurs="1" maxOccurs="1"/>
    </xsd:sequence>
    <xsd:anyAttribute/>
  </xsd:complexType>
  <xsd:complexType name="AuditUserType">
    <xsd:sequence>
      <xsd:element name="userId" type="mgqi:QualifiedId"/>
      <xsd:element name="userType" type="cdt:MyGovUserType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:annotation>
    <xsd:documentation>================================================================================</xsd:documentation>
  </xsd:annotation>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\workspace\csiServiceArtefacts\csiServiceArtefacts\trunk\ESBRelease2\schema\mygov\common\v20130907\MyGovCommonCoreDatatypes.v20130907.xsd</con:url><con:content><![CDATA[<!--===========================================================================
    @File:          MyGovCommonCoreDatatypes.v20130907.xsd
    @Author:        MyGov Australia
    @Version:       v20130907
    @CreatedDate:   2013/07/25
    @Release:       2
    @Description:   This XSD contains the common core data types for MyGov Australia
    ===========================================================================-->
<xsd:schema targetNamespace="http://ns.services.my.gov.au/common/schema/2013/09/07/datatypes" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://ns.services.my.gov.au/common/schema/2013/09/07/datatypes">
  <xsd:simpleType name="SeverityType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Fatal"/>
      <xsd:enumeration value="Error"/>
      <xsd:enumeration value="Warning"/>
      <xsd:enumeration value="Informational"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ServiceMessageCodeType">
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>
  <xsd:simpleType name="CustomerOrganisationType">
    <xsd:restriction base="xsd:string">
      <xsd:length value="3"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="CustomerIdentifierType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="20"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="KnownMemberServiceType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="CLK"/>
      <xsd:enumeration value="CSA"/>
      <xsd:enumeration value="MCA"/>
      <xsd:enumeration value="EHR"/>
      <xsd:enumeration value="DCA"/>
      <xsd:enumeration value="DVA"/>
      <xsd:enumeration value="ATO"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="UnknownMemberServiceType">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[A-Z]{12}"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="KnownMyGovUserType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="USER"/>
      <xsd:enumeration value="STAFF"/>
      <xsd:enumeration value="APPU"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="UnknownMyGovUserType">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[A-Z]{12}"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="GlobalSessionKeyType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="32"/>
      <xsd:maxLength value="45"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MemberServiceType">
    <xsd:union memberTypes="tns:KnownMemberServiceType tns:UnknownMemberServiceType"/>
  </xsd:simpleType>
  <xsd:simpleType name="MyGovUserType">
    <xsd:union memberTypes="tns:KnownMyGovUserType tns:UnknownMyGovUserType"/>
  </xsd:simpleType>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\workspace\csiServiceArtefacts\csiServiceArtefacts\trunk\ESBRelease2\schema\mygov\common\v20130907\MyGovCommonQualifiedIdentifier.v20130907.xsd</con:url><con:content><![CDATA[<!--===========================================================================
    @File:          MyGovCommonQualifiedIdentifier.v20130907.xsd
    @Author:        MyGov - DHS Australia
    @Version:       v20130907
    @CreatedDate:   2013/07/25
    @Release:       2
    @Description:   This schema contains MyGov Qualified Identifier Schema
    ===========================================================================-->
<xsd:schema targetNamespace="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" elementFormDefault="qualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:cqi="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
  <xsd:import namespace="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" schemaLocation="../../../oasis/oasis-200401-wss-wssecurity-utility-1.0.xsd"/>
  <xsd:element name="qualifiedId" type="cqi:QualifiedId"/>
  <xsd:complexType name="QualifiedId">
    <xsd:sequence>
      <xsd:element name="qualifier" type="xsd:anyURI" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="id" type="xsd:string" minOccurs="1" maxOccurs="1"/>
    </xsd:sequence>
    <xsd:anyAttribute/>
  </xsd:complexType>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\workspace\csiServiceArtefacts\csiServiceArtefacts\trunk\ESBRelease2\schema\mygov\inbox\messages\v20130907\mygov.inbox.messages.v20130907.xsd</con:url><con:content><![CDATA[<!--===========================================================================
    @File:			mygov.inbox.messages.v20130907.xsd
    @Author:		myGov Australia
    @Version:		2013/09/07
    @CreatedDate:	2013/01/16
    @Release:       	1
    @Description:   	This XSD contains the elements for the Inbox function of myGov
    ===========================================================================-->
<xsd:schema targetNamespace="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:core20130907="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07" xmlns:ce="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:tns="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07">
  <xsd:import namespace="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07" schemaLocation="../../core/v20130907/mygov.inbox.core.v20130907.xsd"/>
  <xsd:import namespace="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" schemaLocation="../../../common/v20130907/MyGovCommonCoreElements.v20130907.xsd"/>
  <xsd:element name="publishMessage" type="tns:PublishMessageType"/>
  <xsd:element name="publishMessageResponse" type="tns:PublishMessageResponseType"/>
  <xsd:element name="retrieveAttachment" type="tns:RetrieveAttachmentType"/>
  <xsd:element name="retrieveAttachmentResponse" type="tns:RetrieveAttachmentResponseType"/>
  <xsd:complexType name="PublishMessageType">
    <xsd:sequence>
      <xsd:element name="memberServiceMessageId" type="core20130907:MemberServiceMessageIdType" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="memberServiceId" type="core20130907:MemberServiceIdType" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="messageType" type="core20130907:MessageTypeType" minOccurs="1" maxOccurs="1"/>
      <xsd:element ref="core20130907:messagePriority" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="messageSubject" type="core20130907:MessageSubjectType" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="messageExpiryDate" type="core20130907:MessageExpiryDateType" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="memberServiceDateTime" type="core20130907:MemberServiceDateTimeType" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="onBehalfOf" type="core20130907:OnBehalfOfType" minOccurs="0" maxOccurs="1"/>
      <xsd:element ref="core20130907:alertSentIndicator" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="messageRead" type="core20130907:MessageReadType" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="messageBody" type="core20130907:MessageBodyType" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="attachments" type="core20130907:AttachmentsType" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="relatedURLs" type="core20130907:RelatedURLsType" minOccurs="0" maxOccurs="50"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:annotation>
    <xsd:documentation>memberServiceMessageId - unique id of the message. Id must be unique within the Member Service
			memberServiceId - is the Member Service acronym e.g. ATO, CLK, CSP, MCA
			messageType - is the type of message
			messagePriority - is the importance of the message: "urgent", "normal", "non-urgent"
			messageSubject - subject of the message
			messageBody - text body of the message
			messageExpiryDate - set by the Member Service to indicate when a message can no longer be viewed
			memberServiceDateTime - is either the date time the message was sent by the Member Service or generated at the Member Service
			onBehalfOf - name of the client the message was sent on behalf of
			alertSentIndicator - is used when the Member Service has already sent an SMS/ email notification
			messageRead - refer to message read type
			attachments - refer to attachments type
			relatedURLs - refer to relatedURLs type</xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="PublishMessageResponseType">
    <xsd:sequence>
      <xsd:element ref="core20130907:publishMessageResult" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="serviceMessagesType" type="ce:ServiceMessagesType" minOccurs="0" maxOccurs="1"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:annotation>
    <xsd:documentation>publishMessageResult - refer to publishMessageResult type
			serviceMessagesType - used to return error and informational messages. Used for business errors only. Technical errors must be returned as a SOAP fault</xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="RetrieveAttachmentType">
    <xsd:sequence>
      <xsd:element name="memberServiceAttachmentId" type="core20130907:MemberServiceAttachmentIdType" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="memberServiceMessageId" type="core20130907:MemberServiceMessageIdType" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="memberServiceDateTime" type="core20130907:MemberServiceDateTimeType" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="mimeType" type="core20130907:MimeTypeType" minOccurs="1" maxOccurs="1"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:annotation>
    <xsd:documentation>memberServiceAttachmentId - unique id of the attachment. Used by the Member Service to retrieve attachments. Id must be unique within the Member Service or in conjunction with memberServiceMessageId
			memberServiceMessageId - unique id of the message. Id must be unique within the Member Service
			memberServiceDateTime - is either the date time the message was sent by the Member Service or generated at the Member Service
			mimeType - or Media Type of the attachment. Must be known and supported by myGov.</xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="RetrieveAttachmentResponseType">
    <xsd:sequence>
      <xsd:element ref="core20130907:retrieveAttachmentResult" minOccurs="1" maxOccurs="1"/>
      <xsd:choice>
        <xsd:sequence>
          <xsd:element name="attachmentResponse" type="core20130907:AttachmentResponseType" minOccurs="1" maxOccurs="1"/>
          <xsd:element name="attachmentSize" type="core20130907:AttachmentSizeType" minOccurs="1" maxOccurs="1"/>
          <xsd:element name="attachmentPageCount" type="core20130907:AttachmentPageCountType" minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
        <xsd:element name="serviceMessagesType" type="ce:ServiceMessagesType" minOccurs="1" maxOccurs="1"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:annotation>
    <xsd:documentation>retrieveAttachmentResponse - 'SUCCESS' or 'FAILED'
			attachmentResponse - the base64 binary of the attachment
			attachmentSize - the size of the attachment, in bytes
			attachmentPageCount - where available, the number of pages in the attachment
			serviceMessagesType - used to return error and informational messages. Used for business errors only. Technical errors must be returned as a SOAP fault</xsd:documentation>
  </xsd:annotation>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\workspace\csiServiceArtefacts\csiServiceArtefacts\trunk\ESBRelease2\schema\mygov\inbox\core\v20130907\mygov.inbox.core.v20130907.xsd</con:url><con:content><![CDATA[<!--===========================================================================
    @File:			mygov.inbox.core.v20130907.xsd
    @Author:		myGov Australia
    @Version:		2013/09/07
    @CreatedDate:	2013/01/16
    @Release:       	1
    @Description:   	This XSD contains the core date elements for the Inbox function of myGov
    ===========================================================================-->
<xsd:schema targetNamespace="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:tns="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
  <xsd:import namespace="http://www.w3.org/2005/05/xmlmime" schemaLocation="../../../../w3c/xmlmime-1.1.xsd"/>
  <xsd:element name="alertSentIndicator" type="tns:YNEnum"/>
  <xsd:simpleType name="AttachmentNameType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="100"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="AttachmentResponseType">
    <xsd:simpleContent>
      <xsd:extension base="xsd:base64Binary">
        <xsd:attribute ref="xmime:contentType" use="required"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:simpleType name="AttachmentPageCountType">
    <xsd:restriction base="xsd:int"/>
  </xsd:simpleType>
  <xsd:simpleType name="AttachmentSizeType">
    <xsd:restriction base="xsd:int"/>
  </xsd:simpleType>
  <xsd:simpleType name="AttachmentTitleType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="100"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="AttachmentType">
    <xsd:sequence>
      <xsd:element name="memberServiceAttachmentId" type="tns:MemberServiceAttachmentIdType"/>
      <xsd:element name="displayPosition" type="tns:DisplayPositionType"/>
      <xsd:element name="attachmentName" type="tns:AttachmentNameType"/>
      <xsd:element name="attachmentTitle" type="tns:AttachmentTitleType"/>
      <xsd:element name="attachmentSize" type="tns:AttachmentSizeType"/>
      <xsd:element name="mimeType" type="tns:MimeTypeType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:annotation>
    <xsd:documentation>memberServiceAttachmentId - unique id of the attachment. Used by the Member Service to retrieve attachments. Id must be unique within the Member Service or unique in conjunction with memberServiceMessageId
			displayPosition - the position (order) in which the attachment is to be displayed
			attachmentName - the actual name of the attachment.
			attachmentTitle - the display name of the attachment. May be the same as attachmentName. Used for display purposes only
			attachmentSize - the size of the attachment, in bytes
			mimeType - or Media Type of the attachment. Must be known and supported by myGov customers.</xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="AttachmentsType">
    <xsd:sequence>
      <xsd:element name="primaryAttachmentId" type="tns:MemberServiceAttachmentIdType"/>
      <xsd:element name="attachment" type="tns:AttachmentType" minOccurs="1" maxOccurs="50"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:annotation>
    <xsd:documentation>primaryAttachmentId - the attachmentId that belongs to the primary attachment. Must match one of memberServiceAttachmentId in the attachment array
			attachment - refer to AttachmentType</xsd:documentation>
  </xsd:annotation>
  <xsd:simpleType name="MessageBodyType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="2048"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MessageContentType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="20"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MessageExpiryDateType">
    <xsd:restriction base="xsd:date"/>
  </xsd:simpleType>
  <xsd:element name="messagePriority" type="tns:MessagePriorityEnum"/>
  <xsd:simpleType name="MessagePriorityEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="urgent"/>
      <xsd:enumeration value="normal"/>
      <xsd:enumeration value="non-urgent"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="MessageReadType">
    <xsd:sequence>
      <xsd:element name="readIndicator" type="tns:YNEnum"/>
      <xsd:element name="readDateTime" type="xsd:dateTime"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:annotation>
    <xsd:documentation>readIndicator - used by the Member Service when the message should be marked as 'Read' in myGov Inbox immediately.
			readDateTime - the date time which the message was first read.</xsd:documentation>
  </xsd:annotation>
  <xsd:simpleType name="MessageSubjectType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="250"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MessageTypeType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="40"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="DisplayPositionType">
    <xsd:restriction base="xsd:int"/>
  </xsd:simpleType>
  <xsd:simpleType name="MemberServiceAttachmentIdType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="40"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MemberServiceMessageIdType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="40"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MemberServiceDateTimeType">
    <xsd:restriction base="xsd:dateTime"/>
  </xsd:simpleType>
  <xsd:simpleType name="MemberServiceIdType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="12"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="MimeTypeType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="100"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="OnBehalfOfType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="100"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:element name="publishMessageResult" type="tns:SuccessFailedEnum"/>
  <xsd:complexType name="RelatedURLsType">
    <xsd:sequence>
      <xsd:element name="urlTitle" type="tns:URLTitleType"/>
      <xsd:element name="url" type="tns:URLType"/>
      <xsd:element name="displayPosition" type="tns:DisplayPositionType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:annotation>
    <xsd:documentation>urlTitle - the display name of the url. Used for display purposes only
			url - the fully qualified url of the link
			displayPosition - the position (order) in which the attachment is to be displayed</xsd:documentation>
  </xsd:annotation>
  <xsd:element name="retrieveAttachmentResult" type="tns:SuccessFailedEnum"/>
  <xsd:simpleType name="SuccessFailedEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="SUCCESS"/>
      <xsd:enumeration value="FAILED"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="URLTitleType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="100"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="URLType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
      <xsd:maxLength value="2048"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="YNEnum">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Y"/>
      <xsd:enumeration value="N"/>
    </xsd:restriction>
  </xsd:simpleType>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\workspace\csiServiceArtefacts\csiServiceArtefacts\trunk\ESBRelease2\schema\w3c\xmlmime-1.1.xsd</con:url><con:content><![CDATA[<!--W3C XML Schema defined in the Describing Media Content of Binary Data in XML
   specification
     http://www.w3.org/TR/xml-media-types

   Copyright © 2005 World Wide Web Consortium,
  
   (Massachusetts Institute of Technology, European Research Consortium for
   Informatics and Mathematics, Keio University). All Rights Reserved. This
   work is distributed under the W3C® Software License [1] in the hope that
   it will be useful, but WITHOUT ANY WARRANTY; without even the implied
   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  
   [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231

   $Id: xmlmime.xsd,v 1.1 2005/04/25 17:08:35 hugo Exp $-->
<xs:schema targetNamespace="http://www.w3.org/2005/05/xmlmime" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xmime="http://www.w3.org/2005/05/xmlmime">
  <xs:attribute name="contentType">
    <xs:simpleType>
      <xs:restriction base="xs:string">
        <xs:minLength value="3"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="expectedContentTypes" type="xs:string"/>
  <xs:complexType name="base64Binary">
    <xs:simpleContent>
      <xs:extension base="xs:base64Binary">
        <xs:attribute ref="xmime:contentType"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="hexBinary">
    <xs:simpleContent>
      <xs:extension base="xs:hexBinary">
        <xs:attribute ref="xmime:contentType"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.240.211.172:10433/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:endpoint>http://gov8-0w10-qas.csda.gov.au:10763/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="publishMessage" bindingOperationName="publishMessage" type="Request-Response" outputName="publishMessageResponse" inputName="publishMessageRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="d431ecc5-3048-4729-bc71-111411380074"><con:settings/><con:call id="91c31e6b-c07a-4111-a483-76d876131830" name="Request 1" useWsAddressing="true"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.240.211.172:10433/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">\r
   <soap:Header>\r
      <add:To>?</add:To>\r
      <add:MessageID>?</add:MessageID>\r
      <add:Action>?</add:Action>\r
      <oas:Security>\r
         <!--You may enter ANY elements at this point-->\r
      </oas:Security>\r
      <elem:audit>\r
         <elem:user>\r
            <elem:userId>\r
               <ns:qualifier>?</ns:qualifier>\r
               <ns:id>?</ns:id>\r
            </elem:userId>\r
            <elem:userType>?</elem:userType>\r
         </elem:user>\r
         <elem:globalSessionKey>?</elem:globalSessionKey>\r
      </elem:audit>\r
      <elem:subjectId>\r
         <ns:qualifier>?</ns:qualifier>\r
         <ns:id>?</ns:id>\r
      </elem:subjectId>\r
      <elem:product>\r
         <elem:organisation>\r
            <ns:qualifier>?</ns:qualifier>\r
            <ns:id>?</ns:id>\r
         </elem:organisation>\r
         <elem:productName>?</elem:productName>\r
         <elem:productVersion>?</elem:productVersion>\r
         <elem:platform>?</elem:platform>\r
      </elem:product>\r
   </soap:Header>\r
   <soap:Body>\r
      <ns1:publishMessage>\r
         <ns1:memberServiceMessageId>?</ns1:memberServiceMessageId>\r
         <ns1:memberServiceId>?</ns1:memberServiceId>\r
         <ns1:messageType>?</ns1:messageType>\r
         <ns2:messagePriority>?</ns2:messagePriority>\r
         <ns1:messageSubject>?</ns1:messageSubject>\r
         <!--Optional:-->\r
         <ns1:messageExpiryDate>?</ns1:messageExpiryDate>\r
         <ns1:memberServiceDateTime>?</ns1:memberServiceDateTime>\r
         <!--Optional:-->\r
         <ns1:onBehalfOf>?</ns1:onBehalfOf>\r
         <!--Optional:-->\r
         <ns2:alertSentIndicator>?</ns2:alertSentIndicator>\r
         <!--Optional:-->\r
         <ns1:messageRead>\r
            <ns2:readIndicator>?</ns2:readIndicator>\r
            <ns2:readDateTime>?</ns2:readDateTime>\r
         </ns1:messageRead>\r
         <!--Optional:-->\r
         <ns1:messageBody>?</ns1:messageBody>\r
         <!--Optional:-->\r
         <ns1:attachments>\r
            <ns2:primaryAttachmentId>?</ns2:primaryAttachmentId>\r
            <!--1 to 50 repetitions:-->\r
            <ns2:attachment>\r
               <ns2:memberServiceAttachmentId>?</ns2:memberServiceAttachmentId>\r
               <ns2:displayPosition>?</ns2:displayPosition>\r
               <ns2:attachmentName>?</ns2:attachmentName>\r
               <ns2:attachmentTitle>?</ns2:attachmentTitle>\r
               <ns2:attachmentSize>?</ns2:attachmentSize>\r
               <ns2:mimeType>?</ns2:mimeType>\r
            </ns2:attachment>\r
         </ns1:attachments>\r
         <!--0 to 50 repetitions:-->\r
         <ns1:relatedURLs>\r
            <ns2:urlTitle>?</ns2:urlTitle>\r
            <ns2:url>?</ns2:url>\r
            <ns2:displayPosition>?</ns2:displayPosition>\r
         </ns1:relatedURLs>\r
      </ns1:publishMessage>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:RestService" id="4a0fd67a-981b-4c4c-af41-58573482eca0" wadlVersion="http://wadl.dev.java.net/2009/02" name="myGov.V20130907.publishmessage.bulk" type="rest" definitionUrl=":msg" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/></con:interface><con:testSuite name="PublishMessageTestSuite" id="6a8f4961-cfd3-4587-b516-61c3b4a04b79"><con:settings/><con:runType>PARALLELL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage TestCase 1" searchProperties="true" id="395fb297-cb00-4d63-ac52-8fffc3f72bcd"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="8f191225-5aee-4157-b759-71322c69b776"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
log.setLevel(org.apache.log4j.Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Government support for coronavirus - about your intention to claim";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)


log.debug("Data Folder : " + dataFolderName);
log.debug("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFileRecurse () { file -> 
	dataFiles &lt;&lt; file;
}

log.debug("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.debug("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	//   String [] myGovCustomerDetails = myGovCustomer.split(",");
	//   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");
</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="fd37b413-d11c-4a45-935b-b91d674ac21d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://gov8-0w10-qas.csda.gov.au:10763/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>BF186906</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>BF186906</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MCA</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>normal</ns2:messagePriority>
         <ns1:messageSubject>test message mgv</ns1:messageSubject>
	    <ns1:messageExpiryDate>2024-01-18</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>2022-01-18T12:26:16</ns1:memberServiceDateTime>
         <ns1:onBehalfOf>Australian Govt</ns1:onBehalfOf>
         <ns1:messageBody><![CDATA[<b>Your myGov credentials have been compromised</b><br/><br/> We have received information from a trusted source that a device you used to access your myGov account has been infected with malware. myGov itself remains safe.<br/> As a result, your myGov email or username and password has been stolen. <br/> Our analysis indicates that the stolen password <b>does not match</b> your current myGov account. However, if you use the compromised password on other online accounts, you could still be impacted by this malware.<br/><br/> <b>What you need to do</b><br/> <ul> <li>Check that the device you use to access myGov is secure and free from malicious software.</li> <ul> <li>Visit <b>cyber.gov.au/acsc/view-all-content/threats/malware</b> if you need help to do this.</li> </ul> </ul> <br/> <b>Where to get further help</b><br/> Call the Services Australia Scams and Identity Theft Helpdesk on <b>1800 941 126</b> (Monday to Friday 8am to 5pm AEST). We can provide further information and advice regarding the cyber incident, and assist you with concerns related to myGov, Centrelink, Medicare, and Child Support.<br/> Read more about protecting your personal information at <b>servicesaustralia.gov.au/scams</b><br/> Our website also has a link to the <b>IDCARE</b>. They can provide you with specialist advice and assistance. You can contact IDCARE through their online 'Get Help' form on their website.<br/><br/> Regards,<br/> Scams and Identity Theft Helpdesk<br/> Services Australia<br/>]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>Check that the device you use to access myGov is secure and free from malicious software</ns2:urlTitle>
            <ns2:url>https://cyber.gov.au/acsc/view-all-content/threats/malware</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>3</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="513c976a-41b5-4538-9821-d4a4bf614394" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-1</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage TestCase 2" searchProperties="true" id="86ea2eac-5a36-4140-8e2a-15a54859a278"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="bd2df130-c999-414d-a2db-07544363eeb6"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
log.setLevel(org.apache.log4j.Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Government support for coronavirus - about your intention to claim";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)


log.debug("Data Folder : " + dataFolderName);
log.debug("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFileRecurse () { file -> 
	dataFiles &lt;&lt; file;
}

log.debug("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.debug("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="b42440f0-c8b5-4829-a9f3-b8af45842a30"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://gov8-0w10-qas.csda.gov.au:10763/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>JS255580</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>JS255580</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Alert</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>
         <ns1:messageBody><![CDATA[Hello<br/><br/>Thank you for registering your intention to claim a Centrelink payment. The next step is to find a payment which best suits you and then set up your Centrelink online account. You can read more information from the link, 'Next steps after you register your intention to claim'.<br/><br/><strong>Find a payment</strong><br/>If you have an employer check if they will pay you JobKeeper Payment. They'll tell you if they're eligible to claim and can pay you. Select the JobKeeper Payment link below for more information.<br/><br/>If you want to claim a Centrelink payment (such as JobSeeker Payment), you need to submit your claim by 8 May 2020. This is so we can backdate your payment to the earliest possible date if your claim is granted.<br/><br/>If you are not sure which payment best suits you, select the pre-claim guide link below.<br/><br/><strong>If you don't have a Centrelink online account linked on myGov, set one up</strong><br/> You need a CRN to set up your Centrelink online account. If you don't know your CRN, or you don't think you have one you can do this on myGov as well.<br/><ol> <li>Return to the myGov homepage and select 'Continue'.</li> <li>Choose the right option for you and follow the prompts</li> <li>You'll need to enter details from your identity documents, find out what you may need from the 'next steps' link below</li> <li>myGov will link to your new Centrelink online account.</li> </ol><br/><strong>Once you've set up your Centrelink online account, or if you already have one</strong><br/> Access your Centrelink account from myGov and commence your claim.<br/> If you don't want to claim a Centrelink payment anymore, you don't need to do anything.<br/><br/>If you are already receiving a Centrelink payment you may be eligible for the Economic Stimulus Payment or the Coronavirus Supplement. More information is available at the link below, 'Covid19 Financial help'.<br/><br/><br/>Regards<br/>Centrelink]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>Next steps after you register your intention to claim</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/individuals/subjects/affected-coronavirus-covid-19/if-you-need-payment/next-steps-after-you-register-your-intention-claim?utm_source=mygov%26utm_medium=inbox%26utm_campaign=intent-to-claim-a-b2</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>JobKeeper Payment</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/individuals/news/jobkeeper-payment-supports-australian-businesses-impacted-coronavirus-covid-19?utm_source=mygov%26utm_medium=inbox%26utm_campaign=intent-to-claim-a-b2</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>Pre-claim guide</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/individuals/subjects/affected-coronavirus-covid-19/if-you-need-payment?utm_source=mygov%26utm_medium=inbox%26utm_campaign=intent-to-claim-a-b2#guide</ns2:url>
            <ns2:displayPosition>3</ns2:displayPosition>
         	</ns1:relatedURLs>
		<ns1:relatedURLs>
		  <ns2:urlTitle>Covid19 Financial help</ns2:urlTitle>  
		  <ns2:url>https://www.servicesaustralia.gov.au/individuals/subjects/affected-coronavirus-covid-19#a1</ns2:url>
		  <ns2:displayPosition>4</ns2:displayPosition>
		</ns1:relatedURLs>         
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="bulkLoadInboxMessages.backup" id="bd35ad02-a771-455b-b026-3507e348f7fc" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory

//import com.eviware.soapui.support.types.StringToStringsMap;
import javax.xml.datatype.DatatypeFactory;
//import au.gov.mca.uhi.security.util.XMLSigner;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def inputDataFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/process-data.txt") 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def tc =  testRunner.getTestCase();
def outputLogFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovEmail.log")
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Government support for coronavirus - about your intention to claim";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}


context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

def saveToFile(file, content, logTs, logNewLine) {
/**
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
*/
}
List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
def counter = 0;
inputDataFile.eachLine { myGovCustomer ->
   String myGovID = myGovCustomer;
   //String[] myGovCustomerDetails = myGovCustomer.split(",");
   //String myGovID = myGovCustomerDetails[0];
   //String myGovCustomerName = myGovCustomerDetails[1];
   String myGovCustomerName = "myGov User";
   context.myGovID = myGovID;
   context.myGovCustomerName = myGovCustomerName;
   counter++;

//   String [] myGovCustomerDetails = myGovCustomer.split(",");
//   context.myGovID = myGovCustomerDetails [1];
   
   //Get the step2, index of the step is 1
   //def step = context.testCase.getTestStepAt(1)
   log.info (" - " + counter + ") Processing: " + myGovID);
   def step = context.testCase.getTestStepByName("publish-message-conc")
   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
   requestHolder.updateProperty();

   saveToFile (outputLogFile, myGovID, true, false);
   saveToFile (outputLogFile, " : ", false, false);
   
   step.run(testRunner, context)
   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");

   if (executionResult == "SUCCESS") {
   	saveToFile (outputLogFile, executionResult,false, true);
   } else {
	saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
   }
  
   //saveToFile (outputLogFile, "${counter} --> ${myGovID}")
   //Run the step2
   //saveToFile (outputLogFile, context.expand( '${step#Response}'))

}
//saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
log.info("----------------------------------------------------");</script></con:config></con:testStep><con:loadTest id="7ebc49d1-91ac-4986-998a-95ba7eca37a3" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2022-02-07" searchProperties="true" id="ba0ed581-4e7a-4af6-9bfa-3c612c2d8cfc"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="e9224eae-0087-4efe-8833-e6cf9841fa02"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Change your myGov password";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)


log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="13359808-347d-4e02-83e6-1c2e040cd996"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>WW419228</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>WW419228</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>
         <ns1:messageBody><![CDATA[To protect your personal information, you should change your myGov password now.<br/>Your computer, tablet or phone may have been targeted by a malware campaign.<br/>Malware (or malicious software) can infect your devices when you open emails, visit compromised websites or download infected files.<br/><br/><b>What this means</b><br/>As your computer or device may have been compromised, this could mean your myGov account and linked services could be accessed by someone other than you.<br/>These accounts hold your sensitive personal information, including your myGov username, passwords, email address and other government reference numbers, such as your Medicare card number or Centrelink Customer Reference Number.<br/>It's not too late to protect your information.<br/><br/><b>What you need to do</b><br/><ol><li>Check your devices don't have malicious software. Find guides on doing this at <b>cyber.gov.au</b></li><li>Use a secure internet connection to change the password for your email account that's linked to myGov.</li><li>Change your myGov password and secret questions. Sign in and select <b>Account settings</b>. Choose a strong password you don't use anywhere else.</li><li>Set up myGov security codes for when you sign in to myGov.</li><li>Check your personal details are correct in your linked services, including bank account details and transactions.</li><li>Report any unusual activity in your linked services to the relevant agency.</li><li>Consider changing passwords for other online services you access with your personal device, such as online banking.</li></ol><b>Where to get further help</b><br/>For help changing your myGov details call the myGov helpdesk on <b>132 307</b>, select <b>Option 1</b>.<br/>From outside Australia, call the myGov helpdesk on +61 1300 1MYGOV (1300 169 468), select <b>Option 1</b>. International call charges apply.<br/><br/>For more information, follow the links below <br/><br/>Regards,<br/>myGov Team]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="e949f816-8faa-4e4d-b4d5-b96a2aaccbe3" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2022-02-23</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2022-07-18" searchProperties="true" id="8c9acd9c-8b95-4d13-9f3a-48865e0723c4"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="d46682b7-6577-47cb-b6b0-555ee6f6d089"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Change your myGov password";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="cf9eaf72-bd4e-46af-a1c9-43bd3bf5e92b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>NS446519</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>NS446519</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>
         <ns1:messageBody><![CDATA[To protect your personal information, you should change your myGov password now.<br/>Your computer, tablet or phone may have been targeted by a malware campaign.<br/>Malware (or malicious software) can infect your devices when you open emails, visit compromised websites or download infected files.<br/><br/><b>What this means</b><br/>As your computer or device may have been compromised, this could mean your myGov account and linked services could be accessed by someone other than you.<br/>These accounts hold your sensitive personal information, including your myGov username, passwords, email address and other government reference numbers, such as your Medicare card number or Centrelink Customer Reference Number.<br/>It's not too late to protect your information.<br/><br/><b>What you need to do</b><br/><ol><li>Check your devices don't have malicious software. Find guides on doing this at <b>cyber.gov.au</b></li><li>Use a secure internet connection to change the password for your email account that's linked to myGov.</li><li>Change your myGov password and secret questions. Sign in and select <b>Account settings</b>. Choose a strong password you don't use anywhere else.</li><li>Set up myGov security codes for when you sign in to myGov.</li><li>Check your personal details are correct in your linked services, including bank account details and transactions.</li><li>Report any unusual activity in your linked services to the relevant agency.</li><li>Consider changing passwords for other online services you access with your personal device, such as online banking.</li></ol><b>Where to get further help</b><br/>For help changing your myGov details call the myGov helpdesk on <b>132 307</b>, select <b>Option 1</b>.<br/>From outside Australia, call the myGov helpdesk on +61 1300 1MYGOV (1300 169 468), select <b>Option 1</b>. International call charges apply.<br/><br/>For more information, follow the links below <br/><br/>Regards,<br/>myGov Team]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="bc5e2a10-ba38-4ad9-9074-b5e4a3b3ac40" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2022-07-18</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2022-09-13" searchProperties="true" id="3cf66b07-fa06-46c5-b646-42056e7eb77d"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="d6f02949-9425-49eb-8c2e-fd42e3b90db3"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Change your myGov password";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="b9957c78-9956-4576-9438-173c765109b2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://gov8-0w10-qas.csda.gov.au:10763/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>ZR524470</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>ZR524470</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>
       
         <ns1:messageBody><![CDATA[To protect your personal information, you should change your myGov password now.<br/>Your computer, tablet or phone may have been targeted by a malware campaign.<br/>Malware (or malicious software) can infect your devices when you open emails, visit compromised websites or download infected files.<br/><br/><b>What this means</b><br/>As your computer or device may have been compromised, this could mean your myGov account and linked services could be accessed by someone other than you.<br/>These accounts hold your sensitive personal information, including your myGov username, passwords, email address and other government reference numbers, such as your Medicare card number or Centrelink Customer Reference Number.<br/>It's not too late to protect your information.<br/><br/><b>What you need to do</b><br/><ol><li>Check your devices don't have malicious software. Find guides on doing this at <b>cyber.gov.au</b></li><li>Use a secure internet connection to change the password for your email account that's linked to myGov.</li><li>Change your myGov password and secret questions. Sign in and select <b>Account settings</b>. Choose a strong password you don't use anywhere else.</li><li>Set up myGov security codes for when you sign in to myGov.</li><li>Check your personal details are correct in your linked services, including bank account details and transactions.</li><li>Report any unusual activity in your linked services to the relevant agency.</li><li>Consider changing passwords for other online services you access with your personal device, such as online banking.</li></ol><b>Where to get further help</b><br/>For help changing your myGov details call the myGov helpdesk on <b>132 307</b>, select <b>Option 1</b>.<br/>From outside Australia, call the myGov helpdesk on +61 1300 1MYGOV (1300 169 468), select <b>Option 1</b>. International call charges apply.<br/><br/>For more information, follow the links below <br/><br/>Regards,<br/>myGov Team]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Copy of publish-message-conc" id="b992d338-8e14-48b0-988d-e3dee5e7ecd8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="Copy of publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.pst.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[
<soap:Envelope xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
   <soap:Header><wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"><wsu:Timestamp wsu:Id="TS-88D090D7D8F1F9D95C16651185935182"><wsu:Created>2022-10-07T04:56:33.518Z</wsu:Created><wsu:Expires>2022-10-07T05:26:33.518Z</wsu:Expires></wsu:Timestamp><wsse:UsernameToken wsu:Id="UsernameToken-88D090D7D8F1F9D95C16651185935151"><wsse:Username>mygovesbuser</wsse:Username><wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest">NjXoauQBWeSWFQvu3U0bbCHoRnA=</wsse:Password><wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">/aC8IkoyzrYGTdGNQJX0vA==</wsse:Nonce><wsu:Created>2022-10-07T04:56:33.512Z</wsu:Created></wsse:UsernameToken></wsse:Security>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>NY438890</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:a56fb992-9cee-4459-b2dc-f6828fac1482</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>NY438890</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      
   <add:Action>http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage</add:Action><add:MessageID>uuid:695feabb-f357-47a1-ae73-23f06e301adc</add:MessageID><add:To>http://gov8-0w10-qas.csda.gov.au:10763/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</add:To></soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>b9db0fd4-3ca1-4a53-846a-7543453ae5db</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>Dummy Message</ns1:messageSubject>
         <ns1:memberServiceDateTime>2022-10-07T15:56:33</ns1:memberServiceDateTime>
         <ns1:messageRead>
            <ns2:readIndicator>Y</ns2:readIndicator>
            <ns2:readDateTime>2022-10-07T15:56:33</ns2:readDateTime>
         </ns1:messageRead>
         <ns1:messageBody><![CDATA[To protect your personal information, you should change your myGov password now.<br/>Your computer, tablet or phone may have been targeted by a malware campaign.<br/>Malware (or malicious software) can infect your devices when you open emails, visit compromised websites or download infected files.<br/><br/><b>What this means</b><br/>As your computer or device may have been compromised, this could mean your myGov account and linked services could be accessed by someone other than you.<br/>These accounts hold your sensitive personal information, including your myGov username, passwords, email address and other government reference numbers, such as your Medicare card number or Centrelink Customer Reference Number.<br/>It's not too late to protect your information.<br/><br/><b>What you need to do</b><br/><ol><li>Check your devices don't have malicious software. Find guides on doing this at <b>cyber.gov.au</b></li><li>Use a secure internet connection to change the password for your email account that's linked to myGov.</li><li>Change your myGov password and secret questions. Sign in and select <b>Account settings</b>. Choose a strong password you don't use anywhere else.</li><li>Set up myGov security codes for when you sign in to myGov.</li><li>Check your personal details are correct in your linked services, including bank account details and transactions.</li><li>Report any unusual activity in your linked services to the relevant agency.</li><li>Consider changing passwords for other online services you access with your personal device, such as online banking.</li></ol><b>Where to get further help</b><br/>For help changing your myGov details call the myGov helpdesk on <b>132 307</b>, select <b>Option 1</b>.<br/>From outside Australia, call the myGov helpdesk on +61 1300 1MYGOV (1300 169 468), select <b>Option 1</b>. International call charges apply.<br/><br/>For more information, follow the links below <br/><br/>Regards,<br/>myGov Team]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="d807e9b2-641e-4d0f-b9e2-a329e48d2f96" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2022-09-13</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2022-11-22" searchProperties="true" id="6fa0baa3-f8ac-449c-89c6-31bd1076d3fe"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="abc42647-45de-4bbc-a353-6c31f2bbf7d2"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Your myGov credentials and personal information have been compromised";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="9265187c-373d-40ec-b9c3-fbd381efe8d9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>RF598384</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>RF598384</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>       
         <ns1:messageBody><![CDATA[<b>Your myGov credentials and personal information have been compromised</b><br/><br/> We have information to suggest scammers have taken your myGov sign in details and other personal information via a phishing scam impersonating myGov. myGov itself remains secure.<br/><br/> Scammers often pretend to be from trusted organisations, including us. These scam messages encourage you to click on a link, taking you to a fake website that asks for your personal information.<br/> The information we received suggests you provided most or all of the following personal information to the scam: <ul> <li>myGov email/username and password</li> <li>Name</li> <li>Address</li> <li>Phone number</li> <li>Bank card details</li> <li>One-time SMS code </li> </ul> What you need to do<br/> <ol> <li>Change your myGov password. This is the most effective way to prevent unauthorised access. Make sure it is unique and strong.<br/>Visit <b>cyber.gov.au/passphrases</b> for advice on secure passwords.</li> <li>Check your myGov account history for any unauthorised activity. If you identify anything suspicious, contact us for assistance on the number below.<br/>For advice on how to view your myGov account history, visit <b>my.gov.au</b> and search 'account history'</li> <li>Change your password with any online services where you use the same password as myGov.</li> <li>Review your bank statement for signs of unauthorised activity. If you identify anything suspicious, contact your financial institution.</li> </ol> Where to get further help<br/> Call the Services Australia Scams and Identity Theft Helpdesk on <b>1800 941 126</b> (Monday to Friday 8am to 5pm AEST). We can provide further information and advice, and assist you with concerns related to myGov, Centrelink, Medicare and Child Support.<br/><br/> Read more about protecting your personal information at <b>servicesaustralia.gov.au/scams</b><br/><br/> Regards,<br/><br/> Scams and Identity Theft Helpdesk]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="c35cf263-be41-4a02-bc3a-c6ada1b01ad8" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2022-11-22</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2022-11-23" searchProperties="true" id="9ad71dcf-0aa3-49bd-91fc-d40d56eb6556"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="734c5561-1f10-4573-81a7-61675052d4c7"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Your myGov credentials and personal information have been compromised";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="fbf577dd-a557-4f6a-90e7-3a9888de7d9c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>RF598384</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>RF598384</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>       
         <ns1:messageBody><![CDATA[<b>Your myGov credentials and personal information have been compromised</b><br/><br/> We have information to suggest your myGov sign in details and other personal information was stolen via a phishing scam impersonating myGov. myGov itself remains secure.<br/><br/> Scammers often pretend to be from trusted organisations, including us. These scam messages encourage you to click on a link, taking you to a fake website that asks for your personal information.<br/><br/> The information we received suggests you provided most or all of the following personal information to the scam: <ul> <li>myGov email/username and password</li> <li>Name</li> <li>Address</li> <li>Phone number</li> <li>Bank card details</li> </ul> <b>What you need to do</b><br/><br/> <ol> <li>Change your myGov password. This is the most effective way to prevent unauthorised access. Make sure it is unique and strong<br/>Visit <b>cyber.gov.au/passphrases</b> for advice on secure passwords</li> <li>Check your myGov account history for any unauthorised activity. If you identify anything suspicious, contact us for assistance on the number below<br/>For advice on how to view your myGov account history, visit <b>my.gov.au</b> and search 'account history'</li> <li>Change your password with any online services where you use the same password as myGov</li> <li>Review your bank card statement for signs of unauthorised activity. If you identify anything suspicious, contact your financial institution.</li> </ol> <b>Where to get further help</b><br/> Call the Services Australia Scams and Identity Theft Helpdesk on <b>1800 941 126</b> (Monday to Friday 8 am to 5 pm AEST). We can provide further information and advice, and assist you with concerns related to myGov, Centrelink, Medicare and Child Support.<br/><br/> Read more about protecting your personal information at <b>servicesaustralia.gov.au/scams</b><br/><br/> Regards,<br/><br/> Scams and Identity Theft Helpdesk]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="c5390731-52b6-4bb5-80ba-fa6c9e6573ca" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2022-11-23</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2022-11-24" searchProperties="true" id="39ea66f1-217a-4fd5-874d-08e546aa78e6"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="abc27b10-5d12-448c-ba88-73acc6ba6d98"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Your myGov credentials and personal information have been compromised";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="42852789-a803-437d-a5f2-84fb8ae2c4fc"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>RF598384</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>RF598384</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>       
         <ns1:messageBody><![CDATA[<b>Your myGov credentials and personal information have been compromised</b><br/><br/> We have information to suggest your myGov sign in details and other personal information was stolen via a phishing scam impersonating myGov. myGov itself remains secure.<br/><br/> Scammers often pretend to be from trusted organisations, including us. These scam messages encourage you to click on a link, taking you to a fake website that asks for your personal information.<br/><br/> The information we received indicates you provided the following to the scam: <ul> <li>myGov email or myGov username</li> <li>myGov password</li> <ul> You may have also provided some of the following personal information: <ul> <li>Name</li> <li>Address</li> <li>Phone number</li> </ul> <b>What you need to do</b> <ol> <li>Change your myGov password. This is the most effective way to prevent unauthorised access. Make sure it is unique and strong<br/><b>Visit cyber.gov.au/passphrases</b> for advice on secure passwords</li> <li>Check your myGov account history for any unauthorised activity. If you identify anything suspicious, contact us for assistance on the number below<br/>For advice on how to view your myGov account history, visit <b>my.gov.au</b> and search 'account history'</li> <li>Change your password with any online services where you use the same password as myGov</li> </ol> <b>Where to get further help</b><br/> Call the Services Australia Scams and Identity Theft Helpdesk on <b>1800 941 126</b> (Monday to Friday 8am to 5pm AEST). We can provide further information and advice, and assist you with concerns related to myGov, Centrelink, Medicare and Child Support.<br/><br/> Read more about protecting your personal information at <b>servicesaustralia.gov.au/scams</b><br/><br/> Regards,<br/><br/> Scams and Identity Theft Helpdesk]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="a98c4fa6-b565-4cac-867e-967f6abf90bf" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2022-11-24</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2022-11-25" searchProperties="true" id="087cbc56-4592-457c-b3bc-f7baa8481fd3"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="d3bb3e2e-da16-494f-b100-2b657b47d38b"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Your myGov credentials have been compromised";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="ecce1794-f7fa-435b-8ea9-2f8d969051aa"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>RF598384</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>RF598384</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>       
         <ns1:messageBody><![CDATA[<b>Your myGov credentials have been compromised</b><br/><br/> We have information to suggest your myGov sign in details were stolen via a phishing scam impersonating myGov. myGov itself remains secure.<br/><br/> Scammers often pretend to be from trusted organisations, including us. These scam messages encourage you to click on a link, taking you to a fake website that asks for your personal information.<br/><br/> The information we received indicates you provided the following to the scam: <ul> <li>myGov email or myGov username</li> <li>myGov password</li> </ul> <b>What you need to do</b><br/> <ol> <li>Change your myGov password. This is the most effective way to prevent unauthorised access. Make sure it is unique and strong<br/>Visit <b>cyber.gov.au/passphrases</b> for advice on secure passwords</li> <li>Check your myGov account history for any unauthorised activity. If you identify anything suspicious, contact us for assistance on the number below<br/>For advice on how to view your myGov account history, visit <b>my.gov.au</b> and search 'account history'</li> <li>Change your password with any online services where you use the same password as myGov</li> </ol> <b>Where to get further help</b><br/> Call the Services Australia Scams and Identity Theft Helpdesk on <b>1800 941 126</b> (Monday to Friday 8am to 5pm AEST). We can provide further information and advice, and assist you with concerns related to myGov, Centrelink, Medicare and Child Support.<br/><br/> Read more about protecting your personal information at <b>servicesaustralia.gov.au/scams</b><br/><br/> Regards,<br/> Scams and Identity Theft Helpdesk]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="4390b3da-5934-4a62-893d-229553ca52ab" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2022-11-25</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2022-11-29" searchProperties="true" id="b0d863a0-0c64-4444-a396-abf21c7fee05"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="86e8554a-eb89-4fe8-9a0f-d96afb3076a5"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Your myGov credentials have been compromised";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="5fbdc384-86d8-489a-87bd-ee97ba663878"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>RF598384</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>RF598384</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>       
         <ns1:messageBody><![CDATA[<b>Your myGov credentials have been compromised</b><br/><br/> We have information to suggest your myGov sign in details were stolen via a phishing scam impersonating myGov. myGov itself remains secure.<br/><br/> Scammers often pretend to be from trusted organisations, including us. These scam messages encourage you to click on a link, taking you to a fake website that asks for your personal information.<br/><br/> The information we received indicates you provided the following to the scam: <ul> <li>myGov email or myGov username</li> <li>myGov password</li> </ul> <b>What you need to do</b><br/> <ol> <li>Change your myGov password. This is the most effective way to prevent unauthorised access. Make sure it is unique and strong<br/>Visit <b>cyber.gov.au/passphrases</b> for advice on secure passwords</li> <li>Check your myGov account history for any unauthorised activity. If you identify anything suspicious, contact us for assistance on the number below<br/>For advice on how to view your myGov account history, visit <b>my.gov.au</b> and search 'account history'</li> <li>Change your password with any online services where you use the same password as myGov</li> </ol> <b>Where to get further help</b><br/> Call the Services Australia Scams and Identity Theft Helpdesk on <b>1800 941 126</b> (Monday to Friday 8am to 5pm AEST). We can provide further information and advice, and assist you with concerns related to myGov, Centrelink, Medicare and Child Support.<br/><br/> Read more about protecting your personal information at <b>servicesaustralia.gov.au/scams</b><br/><br/> Regards,<br/> Scams and Identity Theft Helpdesk]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="11e74e34-0f3e-45d9-bea4-4c83f5127906" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2022-11-29</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2022-11-30" searchProperties="true" id="e8ecdd49-3589-4898-91af-e6c39fee4ecd"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="6e11e0a1-7c8a-465c-a314-60275bae703f"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Your myGov credentials have been compromised";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="1cc7add6-552c-4aff-9655-7d91212aea22"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>RF598384</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>RF598384</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>       
         <ns1:messageBody><![CDATA[<b>Your myGov credentials have been compromised</b><br/><br/> We have information to suggest your myGov sign in details were stolen via a phishing scam impersonating myGov. myGov itself remains secure.<br/><br/> Scammers often pretend to be from trusted organisations, including us. These scam messages encourage you to click on a link, taking you to a fake website that asks for your personal information.<br/><br/> The information we received indicates you provided the following to the scam: <ul> <li>myGov email or myGov username</li> <li>myGov password</li> </ul> <b>What you need to do</b><br/> <ol> <li>Change your myGov password. This is the most effective way to prevent unauthorised access. Make sure it is unique and strong<br/>Visit <b>cyber.gov.au/passphrases</b> for advice on secure passwords</li> <li>Check your myGov account history for any unauthorised activity. If you identify anything suspicious, contact us for assistance on the number below<br/>For advice on how to view your myGov account history, visit <b>my.gov.au</b> and search 'account history'</li> <li>Change your password with any online services where you use the same password as myGov</li> </ol> <b>Where to get further help</b><br/> Call the Services Australia Scams and Identity Theft Helpdesk on <b>1800 941 126</b> (Monday to Friday 8am to 5pm AEST). We can provide further information and advice, and assist you with concerns related to myGov, Centrelink, Medicare and Child Support.<br/><br/> Read more about protecting your personal information at <b>servicesaustralia.gov.au/scams</b><br/><br/> Regards,<br/> Scams and Identity Theft Helpdesk]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="01748478-888d-4a6c-a733-b57913cf6ab4" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2022-11-30</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2022-11-30-test" searchProperties="true" id="184e0c72-ed7b-4bcf-b091-060a86e44b88"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="9f879c37-9883-4264-b0f8-af54e6d9b60f"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Your myGov credentials have been compromised";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="3a89a55a-7089-4e13-9ed4-e0d531a01cc9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>RF598384</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>RF598384</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>       
         <ns1:messageBody><![CDATA[<b>Your myGov credentials have been compromised</b><br/><br/> We have received information from a trusted source that a device you used to access your myGov account has been infected with malware. myGov itself remains safe.<br/><br/> As a result, your myGov email or username and password has been stolen.<br/><br/> Our analysis indicates that the stolen password matches your current myGov account. This means a cyber-criminal can attempt to access your myGov account and other online accounts if you use the same password.<br/><br/> <b>What you need to do</b><br/> <ul> <li>Check that the device you use to access myGov is secure and free from malicious software.</li> <ul> <li>Visit <b>cyber.gov.au/acsc/view-all-content/threats/malware</b> if you need help to do this.</li> </ul> <li>Change your myGov password. This is the most effective way to prevent unauthorised access. Make sure it is unique and strong.</li> <ul> <li>Visit <b>cyber.gov.au/passphrases</b> for advice on secure passwords.</li> </ul> </ul> <b>Where to get further help</b><br/> Call the Services Australia Scams and Identity Theft Helpdesk on <b>1800 941 126</b> (Monday to Friday 8am to 5pm AEST). We can provide further information and advice regarding the cyber incident and assist you with concerns related to myGov, Centrelink, Medicare, and Child Support.<br/> Read more about protecting your personal information at <b>servicesaustralia.gov.au/scams</b><br/> The Scams and Identity Theft Helpdesk will attempt to call you around 14 days after the inbox notification if you haven't changed your myGov password.<br/> Our website also has a link to the <b>IDCARE</b>. They can provide you with specialist advice and assistance. You can contact IDCARE through their online 'Get Help' form on their website.<br/><br/> Regards,<br/> Scams and Identity Theft Helpdesk<br/> Services Australia]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>Check that the device you use to access myGov is secure and free from malicious software</ns2:urlTitle>
            <ns2:url>https://cyber.gov.au/acsc/view-all-content/threats/malware</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>Change your myGov password. </ns2:urlTitle>
            <ns2:url>https://cyber.gov.au/passphrases</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>        	
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>3</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>4</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="0a59902e-a56c-47dd-950d-a8d24db16177" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2022-11-30-test</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2023-01-16-a" searchProperties="true" id="f17b7798-aa27-407b-afa3-0cfa88d2fa16"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="b650c546-c3d0-408d-8ba4-f064a3a2ccaa"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Your myGov credentials have been compromised";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="85bb5cd1-f80c-4a98-9f21-57e91e3efc2a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>RF598384</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>RF598384</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>       
         <ns1:messageBody><![CDATA[<b>Your myGov credentials have been compromised</b><br/><br/> We have received information from a trusted source that a device you used to access your myGov account has been infected with malware. myGov itself remains safe.<br/><br/> As a result, your myGov email or username and password has been stolen.<br/><br/> Our analysis indicates that the stolen password matches your current myGov account. This means a cyber-criminal can attempt to access your myGov account and other online accounts if you use the same password.<br/><br/> <b>What you need to do</b><br/> <ul> <li>Check that the device you use to access myGov is secure and free from malicious software.</li> <ul> <li>Visit <b>cyber.gov.au/acsc/view-all-content/threats/malware</b> if you need help to do this.</li> </ul> <li>Change your myGov password. This is the most effective way to prevent unauthorised access. Make sure it is unique and strong.</li> <ul> <li>Visit <b>cyber.gov.au/passphrases</b> for advice on secure passwords.</li> </ul> </ul> <b>Where to get further help</b><br/> Call the Services Australia Scams and Identity Theft Helpdesk on <b>1800 941 126</b> (Monday to Friday 8am to 5pm AEST). We can provide further information and advice regarding the cyber incident and assist you with concerns related to myGov, Centrelink, Medicare, and Child Support.<br/> Read more about protecting your personal information at <b>servicesaustralia.gov.au/scams</b><br/> The Scams and Identity Theft Helpdesk will attempt to call you around 14 days after the inbox notification if you haven't changed your myGov password.<br/> Our website also has a link to the <b>IDCARE</b>. They can provide you with specialist advice and assistance. You can contact IDCARE through their online 'Get Help' form on their website.<br/><br/> Regards,<br/> Scams and Identity Theft Helpdesk<br/> Services Australia]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>Check that the device you use to access myGov is secure and free from malicious software</ns2:urlTitle>
            <ns2:url>https://cyber.gov.au/acsc/view-all-content/threats/malware</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>Change your myGov password. </ns2:urlTitle>
            <ns2:url>https://cyber.gov.au/passphrases</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>        	
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>3</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>4</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="b299df37-b42f-4563-af8d-f877f2fc33fe" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2023-01-16-a</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="publishMessage-2023-01-16-b" searchProperties="true" id="b81ec034-c944-4d5a-b90b-5dc05648426a"><con:settings/><con:testStep type="groovy" name="bulkLoadInboxMessages" id="2c8c5fd4-0826-450d-83be-c63def329555"><con:settings/><con:config><script>import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;
import groovy.time.TimeCategory;
import javax.xml.datatype.DatatypeFactory;

XMLGregorianCalendar cal = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
//log.setLevel(Level.ALL);

log.info("----------------------------------------------------");
log.info("Started " + GregorianCalendar.getInstance().getTime());

def tc =  testRunner.getTestCase();
def baseDataFolderName = tc.testSuite.getPropertyValue("BaseDataFolder");
def baseLogFolderName = tc.testSuite.getPropertyValue("BaseLogFolder");
def batchName = tc.getPropertyValue("BatchName");
//def baseFolderName = "C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/";
def dataFolderName = baseDataFolderName + batchName;
def logFolderName = baseLogFolderName + batchName;
def currentDate = new Date();
def dateFormat = "yyyy-MM-dd"
def messageSubject = "Your myGov credentials have been compromised";
def messageExpiry = ""; 

use(TimeCategory) {
    messageExpiry = (currentDate + 1.year).format(dateFormat);
}

context.myGovMessageSubject = messageSubject;
context.myGovMessageExpiryDate = messageExpiry;

List testCaseList = tc.getTestStepsOfType(com.eviware.soapui.impl.wsdl.teststeps.WsdlTestRequestStep.class)

log.info("Data Folder : " + dataFolderName);
log.info("Log Folder : " + logFolderName);
def dataFolder = new File(dataFolderName);
def dataFiles = [];
dataFolder.eachFile (groovy.io.FileType.FILES) { file -> 
	dataFiles &lt;&lt; file;
}

log.info("Found " + dataFiles.size + " files to process");

dataFiles.each {
	def logFile = new File(logFolderName + "/" + it.name + ".log");
	processFile(it, logFile);
}

def processFile(inFile, outFile) {
	log.info("Processing : Input : " + inFile.name + " : Output : " + outFile.name );	
	def inputDataFile = inFile;
	def outputLogFile = outFile;
	def counter = 0;
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
     saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);
	inputDataFile.eachLine { myGovCustomer ->
	   
	   String myGovID = myGovCustomer;
	   //String[] myGovCustomerDetails = myGovCustomer.split(",");
	   //String myGovID = myGovCustomerDetails[0];
	   //String myGovCustomerName = myGovCustomerDetails[1];
	   String myGovCustomerName = "myGov User";
	   context.myGovID = myGovID;
	   context.myGovCustomerName = myGovCustomerName;
	   counter++;
	
	   //   String [] myGovCustomerDetails = myGovCustomer.split(",");
	   //   context.myGovID = myGovCustomerDetails [1];
	   
	   //Get the step2, index of the step is 1
	   
	   log.info (" - " + counter + ") Processing: " + myGovID);
	   def step = context.testCase.getTestStepByName("publish-message-conc")
	   def requestHolder = groovyUtils.getXmlHolder( step.getName() + "#Request" )
	   requestHolder.declareNamespace("soap", "http://www.w3.org/2003/05/soap-envelope");
	   requestHolder.declareNamespace("elem", "http://ns.services.my.gov.au/common/schema/2013/09/07/elements");
	   requestHolder.declareNamespace("ns", "http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07");
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:subjectId/ns:id", ""+myGovID )
	   requestHolder.setNodeValue( "/soap:Envelope/soap:Header/elem:audit/elem:user/elem:userId/ns:id", ""+myGovID )
	   requestHolder.updateProperty();
	
	   saveToFile (outputLogFile, myGovID, true, false);
	   saveToFile (outputLogFile, " : ", false, false);
	   
	   step.run(testRunner, context)
	   def responseHolder = groovyUtils.getXmlHolder( step.getName() + "#Response" )
	   requestHolder.declareNamespace("soapenv", "http://www.w3.org/2003/05/soap-envelope");
	   def executionResult = responseHolder.getNodeValue("//*:publishMessageResult");
	
	   if (executionResult == "SUCCESS") {
	   	saveToFile (outputLogFile, executionResult,false, true);
	   } else {
		saveToFile (outputLogFile, responseHolder.getNodeValue("/soapenv:Envelope/soapenv:Body/soapenv:Fault/soapenv:Reason/soapenv:Text"), false, true)
	   }
	   sleep(1000);
	  
	}
saveToFile (outputLogFile, "----------------------------------------------------------------------", true, true);

}

def saveToFile(file, content, logTs, logNewLine) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    
    //file.append(dateTime + " - " + content + "\n") 
    if (logTs){
	String dateTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSSS");
    	file.append(dateTime + " - " );    	
    }
    
    file.append(content);

    if (logNewLine) {
    	file.append("\n");
    }
}

log.info("----------------------------------------------------");</script></con:config></con:testStep><con:testStep type="request" name="publish-message-conc" id="63dbca6a-f8d5-4e74-8860-a93d75912f9d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>MGIPUBLISHMESSAGEUTv20130907SOAP12Binding</con:interface><con:operation>publishMessage</con:operation><con:request name="publish-message-conc" useWsAddressing="true" outgoingWss="mygov.dev.esb.usernametoken" id="86285fd3-cecc-4c49-a7b2-81f42bf618e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@skip_soap_action">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://mygovbatch.csda.gov.au/inboxws/MGIPUBLISHMESSAGEUTv20130907Service</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:add="http://www.w3.org/2005/08/addressing" xmlns:oas="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:elem="http://ns.services.my.gov.au/common/schema/2013/09/07/elements" xmlns:ns="http://ns.services.my.gov.au/common/qualifiedidentifier/schema/2013/09/07" xmlns:ns1="http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07" xmlns:ns2="http://ns.services.my.gov.au/inbox/schema/core/2013/09/07">
   <soap:Header>
      <elem:audit>
         <elem:user>
            <elem:userId>
               <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
               <ns:id>RF598384</ns:id>
            </elem:userId>
            <elem:userType>USER</elem:userType>
         </elem:user>
         <elem:globalSessionKey>urn:uuid:${=(java.util.UUID.randomUUID())}</elem:globalSessionKey>
      </elem:audit>
      <elem:subjectId>
         <ns:qualifier>http://ns.services.my.gov.au/qualifier/organisation/mygov</ns:qualifier>
         <ns:id>RF598384</ns:id>
      </elem:subjectId>
      <elem:product>
         <elem:organisation>
            <ns:qualifier>http://ns.services.my.gov.au/qualifier/memberservice</ns:qualifier>
            <ns:id>MGV</ns:id>
         </elem:organisation>
         <elem:productName>myGovSoapUI</elem:productName>
         <elem:productVersion>0.1</elem:productVersion>
         <elem:platform>JavaEE</elem:platform>
      </elem:product>
      <oas:Security>
         <!--You may enter ANY elements at this point-->
      </oas:Security>
   </soap:Header>
   <soap:Body>
      <ns1:publishMessage>
         <ns1:memberServiceMessageId>${=(java.util.UUID.randomUUID())}</ns1:memberServiceMessageId>
         <ns1:memberServiceId>MGV</ns1:memberServiceId>
         <ns1:messageType>Message</ns1:messageType>
         <ns2:messagePriority>urgent</ns2:messagePriority>
         <ns1:messageSubject>${=context.myGovMessageSubject}</ns1:messageSubject>
	    <ns1:messageExpiryDate>${=context.myGovMessageExpiryDate}</ns1:messageExpiryDate>
         <ns1:memberServiceDateTime>${=(new java.text.SimpleDateFormat("YYYY-MM-dd'T'HH:mm:ss").format(new java.util.Date()))}</ns1:memberServiceDateTime>       
         <ns1:messageBody><![CDATA[<b>Your myGov credentials have been compromised</b><br/><br/> We have received information from a trusted source that a device you used to access your myGov account has been infected with malware. myGov itself remains safe.<br/> As a result, your myGov email or username and password has been stolen. <br/> Our analysis indicates that the stolen password <b>does not match</b> your current myGov account. However, if you use the compromised password on other online accounts, you could still be impacted by this malware.<br/><br/> <b>What you need to do</b><br/> <ul> <li>Check that the device you use to access myGov is secure and free from malicious software.</li> <ul> <li>Visit <b>cyber.gov.au/acsc/view-all-content/threats/malware</b> if you need help to do this.</li> </ul> </ul> <br/> <b>Where to get further help</b><br/> Call the Services Australia Scams and Identity Theft Helpdesk on <b>1800 941 126</b> (Monday to Friday 8am to 5pm AEST). We can provide further information and advice regarding the cyber incident, and assist you with concerns related to myGov, Centrelink, Medicare, and Child Support.<br/> Read more about protecting your personal information at <b>servicesaustralia.gov.au/scams</b><br/> Our website also has a link to the <b>IDCARE</b>. They can provide you with specialist advice and assistance. You can contact IDCARE through their online 'Get Help' form on their website.<br/><br/> Regards,<br/> Scams and Identity Theft Helpdesk<br/> Services Australia<br/>]]]]>><![CDATA[</ns1:messageBody>
         	<ns1:relatedURLs>
            <ns2:urlTitle>Check that the device you use to access myGov is secure and free from malicious software</ns2:urlTitle>
            <ns2:url>https://cyber.gov.au/acsc/view-all-content/threats/malware</ns2:url>
            <ns2:displayPosition>1</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>More about how to protect your personal information</ns2:urlTitle>
            <ns2:url>https://www.servicesaustralia.gov.au/scams/</ns2:url>
            <ns2:displayPosition>2</ns2:displayPosition>
         	</ns1:relatedURLs>
         	<ns1:relatedURLs>
            <ns2:urlTitle>For free and independent national identity and cyber support</ns2:urlTitle>
            <ns2:url>https://www.idcare.org/</ns2:url>
            <ns2:displayPosition>3</ns2:displayPosition>
         	</ns1:relatedURLs>
      </ns1:publishMessage>
   </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="XPath Match" name="XPath Match" id="c01bd7f9-493f-41fb-95b8-b5b3828da47e" disabled="true"><con:configuration><path>declare namespace soap12='http://www.w3.org/2003/05/soap-envelope';
declare namespace msg='http://ns.services.my.gov.au/inbox/schema/messages/2013/09/07';
declare namespace core='http://ns.services.my.gov.au/inbox/schema/core/2013/09/07';
/soap12:Envelope/soap12:Body/msg:publishMessageResponse/core:publishMessageResult</path><content>SUCCESS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db49999c-8ecd-4f15-b896-1308656870bf" name="Script Assertion" disabled="true"><con:configuration><scriptText>//Check if there is response
//assert context.request, "Request is empty or null"
def outResponseFile = new File("C:/Data/workspace/git/architecture/myGov/soap-int-mygov-digitalmail-publishmessage/myGovBulkLoadResponse.log")

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
         file.parentFile.mkdirs()
         log.info "Directory did not exist, created"
    }
    file.append(content) 
}

saveToFile(outResponseFile, context.response)</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://ns.services.my.gov.au/inbox/concrete/svc/2013/09/07/publishmessage" mustUnderstand="NONE" version="200508" addDefaultTo="true" generateMessageId="true"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="add02019-1e97-49d2-96b7-4442773977a5" name="LoadTest 1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>BatchName</con:name><con:value>batch-2023-01-16-b</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>BaseDataFolder</con:name><con:value>C:\Data\workspace\git\architecture\myGov\soap-int-mygov-digitalmail\soap\publish-message\data\</con:value></con:property><con:property><con:name>BaseLogFolder</con:name><con:value>C:\Data\workspace\git\architecture\myGov\soap-int-mygov-digitalmail\soap\publish-message\logs\</con:value></con:property></con:properties></con:testSuite><con:properties/><con:wssContainer><con:outgoing><con:name>myGov.mygovesbuser.Dev</con:name><con:entry type="Timestamp"><con:configuration><timeToLive>1000</timeToLive><strictTimestamp>true</strictTimestamp></con:configuration></con:entry><con:entry type="Username" username="mygovesbuser" password="DTe7oXBvMVkV7rtdtFS9"><con:configuration><addCreated>true</addCreated><addNonce>true</addNonce><passwordType>PasswordDigest</passwordType></con:configuration></con:entry></con:outgoing><con:outgoing><con:name>mygov.dev.esb.usernametoken</con:name><con:entry type="Username" username="mygovesbuser" password="DTe7oXBvMVkV7rtdtFS9"><con:configuration><addCreated>true</addCreated><addNonce>true</addNonce><passwordType>PasswordDigest</passwordType></con:configuration></con:entry><con:entry type="Timestamp"><con:configuration><timeToLive>1800</timeToLive><strictTimestamp>true</strictTimestamp></con:configuration></con:entry></con:outgoing><con:outgoing><con:name>mygov.dev.authhub.user</con:name><con:entry type="Username" username="mygovesbuser" password="mygovesbpassword"><con:configuration><addCreated>true</addCreated><addNonce>true</addNonce><passwordType>PasswordDigest</passwordType></con:configuration></con:entry><con:entry type="Timestamp"><con:configuration><timeToLive>1800</timeToLive><strictTimestamp>true</strictTimestamp></con:configuration></con:entry></con:outgoing><con:outgoing><con:name>mygov.dev.linkidconversion</con:name><con:entry type="Timestamp"><con:configuration><timeToLive>1800</timeToLive><strictTimestamp>true</strictTimestamp></con:configuration></con:entry><con:entry type="Username" username="mygovesbuser" password="mygovesbpassword"><con:configuration><addCreated>true</addCreated><addNonce>true</addNonce><passwordType>PasswordDigest</passwordType></con:configuration></con:entry></con:outgoing></con:wssContainer><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>